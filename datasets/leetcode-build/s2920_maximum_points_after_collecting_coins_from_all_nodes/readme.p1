Preconditions:
- The input array `edges` must have a length of `n - 1`, where `n` is the number of nodes in the tree.
- The input array `coins` must have a length of `n`.
- The input integer `k` must be between 0 and 10^- The tree must be undirected and rooted at node - The nodes in the tree must be labeled from 0 to `n - 1`.
- The input array `coins` must contain non-negative integers.

Postconditions:
- The method should return an integer representing the maximum points that can be obtained after collecting the coins from all the tree nodes.

Behavioural requirements:
- The method should collect all the coins from each node in the tree.
- The method should collect the coins in a way that ensures the coins at a node can only be collected if the coins of its ancestors have been already collected.
- If the coins at a node are collected using the first way, the method should subtract `k` from the number of coins and add the result to the total points.
- If the coins at a node are collected using the first way and the result is negative, the method should subtract the absolute value of the result from the total points.
- If the coins at a node are collected using the second way, the method should divide the number of coins by 2 and add the floor value to the total points.
- If the coins at a node are collected using the second way, the method should recursively apply the second way to all the nodes in the subtree of the current node.
- The method should return the maximum points that can be obtained after collecting the coins from all the tree nodes.