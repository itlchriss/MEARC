Preconditions:
- The input `grid` is a square matrix of size `n * n`.
- The values in the `grid` are either `0` or `1`.
- The size of the `grid` is a power of 2, i.e., `n` is equal to `2^x` where `x` is an integer between 0 and 6.

Postconditions:
- The method returns the root of a Quad-Tree representing the `grid`.
- The Quad-Tree is constructed according to the following rules:
  - If the current grid has the same value (i.e., all `1's` or all `0's`), the `isLeaf` attribute of the node is set to `True`, the `val` attribute is set to the value of the grid, and the four children of the node are set to `Null`.
  - If the current grid has different values, the `isLeaf` attribute of the node is set to `False`, the `val` attribute is set to any value, and the current grid is divided into four sub-grids.
  - The method recursively constructs the Quad-Tree for each of the children with the proper sub-grid.
- The Quad-Tree is represented in the serialized format using level order traversal, where `null` signifies a path terminator where no node exists below.
- The serialized format of the Quad-Tree is similar to the serialization of a binary tree, where each node is represented as a list `[isLeaf, val]`.
- If the value of `isLeaf` or `val` is `True`, it is represented as `1` in the list `[isLeaf, val]`. If the value of `isLeaf` or `val` is `False`, it is represented as `0`.