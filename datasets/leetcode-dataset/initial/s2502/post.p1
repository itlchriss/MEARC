Preconditions for the method `public Allocator(int n)`:
- The parameter `n` is an integer representing the total number of memory units.

Postconditions for the method `public Allocator(int n)`:
- The memory array is initialized with `n` number of memory units.

Preconditions for the method `public int allocate(int size, int mID)`:
- The parameters `size` and `mID` are integers representing the size of the block to allocate and the ID of the block, respectively.

Postconditions for the method `public int allocate(int size, int mID)`:
- If a block of `size` consecutive free memory units exists, it is allocated with the ID `mID`.
- The block's first index is returned.
- If no such block exists, `-1` is returned.

Preconditions for the method `public int free(int mID)`:
- The parameter `mID` is an integer representing the ID of the memory units to free.

Postconditions for the method `public int free(int mID)`:
- All memory units with the ID `mID` are freed.
- The number of memory units freed is returned.

Preconditions for the method `public int collapse(Node cur, int id)`:
- The parameter `cur` is a Node object representing the current node in the memory array.
- The parameter `id` is an integer representing the ID of the memory units to collapse.

Postconditions for the method `public int collapse(Node cur, int id)`:
- The memory units with the ID `id` are collapsed, merging adjacent blocks of memory units with the same ID.
- The number of memory units collapsed is returned.

Preconditions for the method `public Node(int i, int sz, int mID)`:
- The parameters `i`, `sz`, and `mID` are integers representing the index, size, and ID of the memory unit, respectively.

Postconditions for the method `public Node(int i, int sz, int mID)`:
- A new Node object is created with the given index, size, and ID.