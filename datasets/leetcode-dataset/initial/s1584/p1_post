The method returns an integer representing the minimum cost to make all points connected.
Preconditions for the method containsFalse(boolean[] mst):
The input boolean array mst is not null.
Postconditions for the method containsFalse(boolean[] mst):
The method returns true if there is at least one false value in the mst array, indicating that not all points are connected.
The method returns false if all values in the mst array are true, indicating that all points are connected.
Preconditions for the method getDistance(int[] p1, int[] p2):
The input arrays p1 and p2 are not null.
The input arrays p1 and p2 have a length of 2, representing the x and y coordinates of the points.
Postconditions for the method getDistance(int[] p1, int[] p2):
The method returns an integer representing the distance between the two points.
Preconditions for the constructor Pair():
None.
Postconditions for the constructor Pair():
None.
Preconditions for the constructor Pair(int dis, int v):
None.
Postconditions for the constructor Pair(int dis, int v):
None.
Preconditions for the method getDis():
None.
Postconditions for the method getDis():
The method returns an integer representing the distance value of the Pair object.
Preconditions for the method getV():
None.
Postconditions for the method getV():
The method returns an integer representing the vertex value of the Pair object.
Preconditions for the method compare(Pair p1, Pair p2):
The input Pair objects p1 and p2 are not null.
Postconditions for the method compare(Pair p1, Pair p2):
The method returns an integer value indicating the comparison result between p1 and p2.
