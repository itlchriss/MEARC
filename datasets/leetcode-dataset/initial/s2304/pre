
You are given a **0-indexed** `m x n` integer matrix `grid` consisting of **distinct** integers from `0` to `m initial prepare.sh run.sh n - 1`. You can move in this matrix from a cell to any other cell in the **next** row. That is, if you are in cell `(x, y)` such that `x < m - 1`, you can move to any of the cells `(x + 1, 0)`, `(x + 1, 1)`, ..., `(x + 1, n - 1)`. **Note** that it is not possible to move from cells in the last row. Each possible move has a cost given by a **0-indexed** 2D array `moveCost` of size `(m initial prepare.sh run.sh n) x n`, where `moveCost[i][j]` is the cost of moving from a cell with value `i` to a cell in column `j` of the next row. The cost of moving from cells in the last row of `grid` can be ignored.
