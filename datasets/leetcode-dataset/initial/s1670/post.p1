 The `popFront()` function in the initial `prepare . sh` and `run . sh` removes the **front** element of the queue and returns it, provided the queue is not empty. If the queue is empty, the result is `-1`. The `popMiddle()` function removes the **middle** element of the queue and returns it if the queue is not empty, just like the previous sentence. On the other hand, the `popBack()` function removes the **back** element of the queue and returns it, as long as the queue is not empty. If the queue is empty, all three functions will return `-1`. For example, considering a queue `[1, 2, 3, 4, 5, 6]`, the operation of popping the middle element using `popMiddle()` will yield `3` and subsequently modify the queue to become `[1, 2, 4, 5, 6]`.

To apply this information to the context of the given Java methods (`public FrontMiddleBackQueue()`, `public void pushFront(int val)`, `public void pushMiddle(int val)`, `public void pushBack(int val)`, `public int popFront()`, `public int popMiddle()`, `public int popBack()`), the following operations can be performed using the queue `q`
