Preconditions for the method `public Graph(int n, int[][] edges)`:
- The parameter `n` is a positive integer representing the number of nodes in the graph.
- The parameter `edges` is a 2D array of integers representing the edges in the graph. Each row in the array represents an edge, and the two elements in the row represent the nodes connected by the edge.

Postconditions for the method `public Graph(int n, int[][] edges)`:
- A new instance of the `Graph` class is created with `n` nodes and the edges specified in the `edges` parameter.

Preconditions for the method `public void addEdge(int[] edge)`:
- The parameter `edge` is a 1D array of integers representing an edge in the graph. The array should have exactly two elements, representing the nodes connected by the edge.

Postconditions for the method `public void addEdge(int[] edge)`:
- The edge specified in the `edge` parameter is added to the graph.

Preconditions for the method `public int shortestPath(int node1, int node2)`:
- The parameters `node1` and `node2` are valid node indices in the graph.

Postconditions for the method `public int shortestPath(int node1, int node2)`:
- The method returns the minimum cost of a path from `node1` to `node2`. If no path exists, the method returns `-1`.

Preconditions for the method `public Pair(K key, V value)`:
- The parameters `key` and `value` are valid objects of types `K` and `V` respectively.

Postconditions for the method `public Pair(K key, V value)`:
- A new instance of the `Pair` class is created with the specified `key` and `value`.

Preconditions for the method `public K getKey()`:
- The `Pair` object on which the method is called is not null.

Postconditions for the method `public K getKey()`:
- The method returns the key value of the `Pair` object.

Preconditions for the method `public V getValue()`:
- The `Pair` object on which the method is called is not null.

Postconditions for the method `public V getValue()`:
- The method returns the value of the `Pair` object.