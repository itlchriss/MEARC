Preconditions for the `public LockingTree(int[] parent)` method:
- The `parent` array must not be null.
- The `parent` array must have at least one element.

Postconditions for the `public LockingTree(int[] parent)` method:
- The LockingTree object is initialized with the given `parent` array.

Preconditions for the `public boolean lock(int num, int user)` method:
- The `num` parameter must be a valid node number.
- The `user` parameter must be a valid user id.

Postconditions for the `public boolean lock(int num, int user)` method:
- If it is possible for the user with id `user` to lock the node `num`, the method returns `true`.
- If it is not possible for the user with id `user` to lock the node `num`, the method returns `false`.
- If the method returns `true`, the node `num` becomes locked by the user with id `user`.

Preconditions for the `public boolean unlock(int num, int user)` method:
- The `num` parameter must be a valid node number.
- The `user` parameter must be a valid user id.

Postconditions for the `public boolean unlock(int num, int user)` method:
- If it is possible for the user with id `user` to unlock the node `num`, the method returns `true`.
- If it is not possible for the user with id `user` to unlock the node `num`, the method returns `false`.
- If the method returns `true`, the node `num` becomes unlocked.

Preconditions for the `public boolean upgrade(int num, int user)` method:
- The `num` parameter must be a valid node number.
- The `user` parameter must be a valid user id.

Postconditions for the `public boolean upgrade(int num, int user)` method:
- If it is possible for the user with id `user` to upgrade the node `num`, the method returns `true`.
- If it is not possible for the user with id `user` to upgrade the node `num`, the method returns `false`.
- If the method returns `true`, the node `num` becomes upgraded.