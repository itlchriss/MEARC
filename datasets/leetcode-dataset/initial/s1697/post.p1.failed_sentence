The system should perform a check to determine if there is a path between the nodes 0 and 1. This check should ensure that each distance along the path is less than a certain value. In cases where there is no path between 0 and 1 with distances less than the specified value, the system should return the false_value. Additionally, the system should verify the existence of a path consisting of two edges (0 -> 1 -> 2), where each edge has a distance less than a certain value. If such a path is present, the system should return the true_value.The output of the system should be a boolean array, which is provided as a result.The boolean array's length must correspond to the length of the queries array.The true_value should be assigned to the jth value of the boolean array if a path exists for the value of queries[j], given that the method public Dsu(int n) initializes the parameter n, the method public int find(int num) returns the result of finding the parameter num, the method public void union(int a, int b) performs a union operation on the parameters a and b, and the method public boolean[] distanceLimitedPathsExist(int n, int[][] edgeList, int[][] queries) takes in the parameters n, edgeList, and queries.For the jth value of the boolean array, if no path is found for queries[j], then the false_value should be assigned.