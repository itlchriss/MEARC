int size():
- Returns the number of elements in this collection
- If this collection contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.
boolean isEmpty():
- Returns true if this collection contains no elements.
boolean contains(Object o):
- Returns true if this collection contains the specified element
- 'More formally, returns true if and only if this collection contains at least one
  element e such that (o==null ? e==null : o.equals(e)).'
Iterator<E> iterator():
- Returns an iterator over the elements in this collection
- There are no guarantees concerning the order in which the elements are returned
  (unless this collection is an instance of some class that provides a guarantee).
Object[] toArray():
- Returns an array containing all of the elements in this collection
- If this collection makes any guarantees as to what order its elements are returned
  by its iterator, this method must return the elements in the same order
- The returned array will be safe in that no references to it are maintained by this
  collection
- (In other words, this method must allocate a new array even if this collection is
  backed by an array)
- The caller is thus free to modify the returned array
- This method acts as bridge between array-based and collection-based APIs.
<T> T[] toArray(T[] a):
- Returns an array containing all of the elements in this collection; the runtime
  type of the returned array is that of the specified array
- If the collection fits in the specified array, it is returned therein
- Otherwise, a new array is allocated with the runtime type of the specified array
  and the size of this collection
- If this collection fits in the specified array with room to spare (i.e., the array
  has more elements than this collection), the element in the array immediately following
  the end of the collection is set to null
- (This is useful in determining the length of this collection only if the caller
  knows that this collection does not contain any null elements.) If this collection
  makes any guarantees as to what order its elements are returned by its iterator,
  this method must return the elements in the same order
- Like the toArray() method, this method acts as bridge between array-based and collection-based
  APIs
- Further, this method allows precise control over the runtime type of the output
  array, and may, under certain circumstances, be used to save allocation costs
- Suppose x is a collection known to contain only strings
- 'The following code can be used to dump the collection into a newly allocated array
  of String:      String[] y = x.toArray(new String[0]); Note that toArray(new Object[0])
  is identical in function to toArray().'
boolean add(E e):
- Ensures that this collection contains the specified element (optional operation)
- Returns true if this collection changed as a result of the call
- (Returns false if this collection does not permit duplicates and already contains
  the specified element.) Collections that support this operation may place limitations
  on what elements may be added to this collection
- In particular, some collections will refuse to add null elements, and others will
  impose restrictions on the type of elements that may be added
- Collection classes should clearly specify in their documentation any restrictions
  on what elements may be added
- If a collection refuses to add a particular element for any reason other than that
  it already contains the element, it must throw an exception (rather than returning
  false)
- This preserves the invariant that a collection always contains the specified element
  after this call returns.
boolean remove(Object o):
- Removes a single instance of the specified element from this collection, if it is
  present (optional operation)
- 'More formally, removes an element e such that (o==null ? e==null : o.equals(e)),
  if this collection contains one or more such elements'
- Returns true if this collection contained the specified element (or equivalently,
  if this collection changed as a result of the call).
boolean containsAll(Collection<?> c):
- Returns true if this collection contains all of the elements in the specified collection.
boolean addAll(Collection<? extends E> c):
- Adds all of the elements in the specified collection to this collection (optional
  operation)
- The behavior of this operation is undefined if the specified collection is modified
  while the operation is in progress
- (This implies that the behavior of this call is undefined if the specified collection
  is this collection, and this collection is nonempty.)
boolean removeAll(Collection<?> c):
- Removes all of this collection's elements that are also contained in the specified
  collection (optional operation)
- After this call returns, this collection will contain no elements in common with
  the specified collection.
default boolean removeIf(Predicate<? super E> filter):
- Removes all of the elements of this collection that satisfy the given predicate
- Errors or runtime exceptions thrown during iteration or by the predicate are relayed
  to the caller.
boolean retainAll(Collection<?> c):
- Retains only the elements in this collection that are contained in the specified
  collection (optional operation)
- In other words, removes from this collection all of its elements that are not contained
  in the specified collection.
void clear():
- Removes all of the elements from this collection (optional operation)
- The collection will be empty after this method returns.
boolean equals(Object o):
- Compares the specified object with this collection for equality
- While the Collection interface adds no stipulations to the general contract for
  the Object.equals, programmers who implement the Collection interface directly (in
  other words, create a class that is a Collection but is not a Set or a List) must
  exercise care if they choose to override the Object.equals
- It is not necessary to do so, and the simplest course of action is to rely on Object's
  implementation, but the implementor may wish to implement a value comparison in
  place of the default reference comparison
- (The List and Set interfaces mandate such value comparisons.) The general contract
  for the Object.equals method states that equals must be symmetric (in other words,
  a.equals(b) if and only if b.equals(a))
- The contracts for List.equals and Set.equals state that lists are only equal to
  other lists, and sets to other sets
- Thus, a custom equals method for a collection class that implements neither the
  List nor Set interface must return false when this collection is compared to any
  list or set
- (By the same logic, it is not possible to write a class that correctly implements
  both the Set and List interfaces.)
int hashCode():
- Returns the hash code value for this collection
- While the Collection interface adds no stipulations to the general contract for
  the Object.hashCode method, programmers should take note that any class that overrides
  the Object.equals method must also override the Object.hashCode method in order
  to satisfy the general contract for the Object.hashCode method
- In particular, c1.equals(c2) implies that c1.hashCode()==c2.hashCode().
default Spliterator<E> spliterator():
- Creates a Spliterator over the elements in this collection
- Implementations should document characteristic values reported by the spliterator
- Such characteristic values are not required to be reported if the spliterator reports
  Spliterator.SIZED and this collection contains no elements
- The default implementation should be overridden by subclasses that can return a
  more efficient spliterator
- In order to preserve expected laziness behavior for the stream() and parallelStream()}
  methods, spliterators should either have the characteristic of IMMUTABLE or CONCURRENT,
  or be late-binding
- 'If none of these is practical, the overriding class should describe the spliterator''s
  documented policy of binding and structural interference, and should override the
  stream() and parallelStream() methods to create streams using a Supplier of the
  spliterator, as in:      Stream<E> s = StreamSupport.stream(() -> spliterator(),
  spliteratorCharacteristics) These requirements ensure that streams produced by the
  stream() and parallelStream() methods will reflect the contents of the collection
  as of initiation of the terminal stream operation.'
default Stream<E> stream():
- Returns a sequential Stream with this collection as its source
- This method should be overridden when the spliterator() method cannot return a spliterator
  that is IMMUTABLE, CONCURRENT, or late-binding
- (See spliterator() for details.)
default Stream<E> parallelStream():
- Returns a possibly parallel Stream with this collection as its source
- It is allowable for this method to return a sequential stream
- This method should be overridden when the spliterator() method cannot return a spliterator
  that is IMMUTABLE, CONCURRENT, or late-binding
- (See spliterator() for details.)
