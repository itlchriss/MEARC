void addFirst(E e):
- Inserts the specified element at the front of this deque if it is possible to do
  so immediately without violating capacity restrictions, throwing an IllegalStateException
  if no space is currently available
- When using a capacity-restricted deque, it is generally preferable to use method
  offerFirst(E).
void addLast(E e):
- Inserts the specified element at the end of this deque if it is possible to do so
  immediately without violating capacity restrictions, throwing an IllegalStateException
  if no space is currently available
- When using a capacity-restricted deque, it is generally preferable to use method
  offerLast(E)
- This method is equivalent to add(E).
boolean offerFirst(E e):
- Inserts the specified element at the front of this deque unless it would violate
  capacity restrictions
- When using a capacity-restricted deque, this method is generally preferable to the
  addFirst(E) method, which can fail to insert an element only by throwing an exception.
boolean offerLast(E e):
- Inserts the specified element at the end of this deque unless it would violate capacity
  restrictions
- When using a capacity-restricted deque, this method is generally preferable to the
  addLast(E) method, which can fail to insert an element only by throwing an exception.
E removeFirst():
- Retrieves and removes the first element of this deque
- This method differs from pollFirst only in that it throws an exception if this deque
  is empty.
E removeLast():
- Retrieves and removes the last element of this deque
- This method differs from pollLast only in that it throws an exception if this deque
  is empty.
E pollFirst():
- Retrieves and removes the first element of this deque, or returns null if this deque
  is empty.
E pollLast():
- Retrieves and removes the last element of this deque, or returns null if this deque
  is empty.
E getFirst():
- Retrieves, but does not remove, the first element of this deque
- This method differs from peekFirst only in that it throws an exception if this deque
  is empty.
E getLast():
- Retrieves, but does not remove, the last element of this deque
- This method differs from peekLast only in that it throws an exception if this deque
  is empty.
E peekFirst():
- Retrieves, but does not remove, the first element of this deque, or returns null
  if this deque is empty.
E peekLast():
- Retrieves, but does not remove, the last element of this deque, or returns null
  if this deque is empty.
boolean removeFirstOccurrence(Object o):
- Removes the first occurrence of the specified element from this deque
- If the deque does not contain the element, it is unchanged
- 'More formally, removes the first element e such that (o==null ? e==null : o.equals(e))
  (if such an element exists)'
- Returns true if this deque contained the specified element (or equivalently, if
  this deque changed as a result of the call).
boolean removeLastOccurrence(Object o):
- Removes the last occurrence of the specified element from this deque
- If the deque does not contain the element, it is unchanged
- 'More formally, removes the last element e such that (o==null ? e==null : o.equals(e))
  (if such an element exists)'
- Returns true if this deque contained the specified element (or equivalently, if
  this deque changed as a result of the call).
boolean add(E e):
- Inserts the specified element into the queue represented by this deque (in other
  words, at the tail of this deque) if it is possible to do so immediately without
  violating capacity restrictions, returning true upon success and throwing an IllegalStateException
  if no space is currently available
- When using a capacity-restricted deque, it is generally preferable to use offer
- This method is equivalent to addLast(E).
boolean offer(E e):
- Inserts the specified element into the queue represented by this deque (in other
  words, at the tail of this deque) if it is possible to do so immediately without
  violating capacity restrictions, returning true upon success and false if no space
  is currently available
- When using a capacity-restricted deque, this method is generally preferable to the
  add(E) method, which can fail to insert an element only by throwing an exception
- This method is equivalent to offerLast(E).
E remove():
- Retrieves and removes the head of the queue represented by this deque (in other
  words, the first element of this deque)
- This method differs from poll only in that it throws an exception if this deque
  is empty
- This method is equivalent to removeFirst().
E poll():
- Retrieves and removes the head of the queue represented by this deque (in other
  words, the first element of this deque), or returns null if this deque is empty
- This method is equivalent to pollFirst().
E element():
- Retrieves, but does not remove, the head of the queue represented by this deque
  (in other words, the first element of this deque)
- This method differs from peek only in that it throws an exception if this deque
  is empty
- This method is equivalent to getFirst().
E peek():
- Retrieves, but does not remove, the head of the queue represented by this deque
  (in other words, the first element of this deque), or returns null if this deque
  is empty
- This method is equivalent to peekFirst().
void push(E e):
- Pushes an element onto the stack represented by this deque (in other words, at the
  head of this deque) if it is possible to do so immediately without violating capacity
  restrictions, throwing an IllegalStateException if no space is currently available
- This method is equivalent to addFirst(E).
E pop():
- Pops an element from the stack represented by this deque
- In other words, removes and returns the first element of this deque
- This method is equivalent to removeFirst().
boolean remove(Object o):
- Removes the first occurrence of the specified element from this deque
- If the deque does not contain the element, it is unchanged
- 'More formally, removes the first element e such that (o==null ? e==null : o.equals(e))
  (if such an element exists)'
- Returns true if this deque contained the specified element (or equivalently, if
  this deque changed as a result of the call)
- This method is equivalent to removeFirstOccurrence(Object).
boolean contains(Object o):
- Returns true if this deque contains the specified element
- 'More formally, returns true if and only if this deque contains at least one element
  e such that (o==null ? e==null : o.equals(e)).'
int size():
- Returns the number of elements in this deque.
Iterator<E> iterator():
- Returns an iterator over the elements in this deque in proper sequence
- The elements will be returned in order from first (head) to last (tail).
Iterator<E> descendingIterator():
- Returns an iterator over the elements in this deque in reverse sequential order
- The elements will be returned in order from last (tail) to first (head).
