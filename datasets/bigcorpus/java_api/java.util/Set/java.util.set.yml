int size():
- Returns the number of elements in this set (its cardinality)
- If this set contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.
boolean isEmpty():
- Returns true if this set contains no elements.
boolean contains(Object o):
- Returns true if this set contains the specified element
- 'More formally, returns true if and only if this set contains an element e such
  that (o==null ? e==null : o.equals(e)).'
Iterator<E> iterator():
- Returns an iterator over the elements in this set
- The elements are returned in no particular order (unless this set is an instance
  of some class that provides a guarantee).
Object[] toArray():
- Returns an array containing all of the elements in this set
- If this set makes any guarantees as to what order its elements are returned by its
  iterator, this method must return the elements in the same order
- The returned array will be safe in that no references to it are maintained by this
  set
- (In other words, this method must allocate a new array even if this set is backed
  by an array)
- The caller is thus free to modify the returned array
- This method acts as bridge between array-based and collection-based APIs.
<T> T[] toArray(T[] a):
- Returns an array containing all of the elements in this set; the runtime type of
  the returned array is that of the specified array
- If the set fits in the specified array, it is returned therein
- Otherwise, a new array is allocated with the runtime type of the specified array
  and the size of this set
- If this set fits in the specified array with room to spare (i.e., the array has
  more elements than this set), the element in the array immediately following the
  end of the set is set to null
- (This is useful in determining the length of this set only if the caller knows that
  this set does not contain any null elements.) If this set makes any guarantees as
  to what order its elements are returned by its iterator, this method must return
  the elements in the same order
- Like the toArray() method, this method acts as bridge between array-based and collection-based
  APIs
- Further, this method allows precise control over the runtime type of the output
  array, and may, under certain circumstances, be used to save allocation costs
- Suppose x is a set known to contain only strings
- 'The following code can be used to dump the set into a newly allocated array of
  String:      String[] y = x.toArray(new String[0]); Note that toArray(new Object[0])
  is identical in function to toArray().'
boolean add(E e):
- Adds the specified element to this set if it is not already present (optional operation)
- 'More formally, adds the specified element e to this set if the set contains no
  element e2 such that (e==null ? e2==null : e.equals(e2))'
- If this set already contains the element, the call leaves the set unchanged and
  returns false
- In combination with the restriction on constructors, this ensures that sets never
  contain duplicate elements
- The stipulation above does not imply that sets must accept all elements; sets may
  refuse to add any particular element, including null, and throw an exception, as
  described in the specification for Collection.add
- Individual set implementations should clearly document any restrictions on the elements
  that they may contain.
boolean remove(Object o):
- Removes the specified element from this set if it is present (optional operation)
- 'More formally, removes an element e such that (o==null ? e==null : o.equals(e)),
  if this set contains such an element'
- Returns true if this set contained the element (or equivalently, if this set changed
  as a result of the call)
- (This set will not contain the element once the call returns.)
boolean containsAll(Collection<?> c):
- Returns true if this set contains all of the elements of the specified collection
- If the specified collection is also a set, this method returns true if it is a subset
  of this set.
boolean addAll(Collection<? extends E> c):
- Adds all of the elements in the specified collection to this set if they're not
  already present (optional operation)
- If the specified collection is also a set, the addAll operation effectively modifies
  this set so that its value is the union of the two sets
- The behavior of this operation is undefined if the specified collection is modified
  while the operation is in progress.
boolean retainAll(Collection<?> c):
- Retains only the elements in this set that are contained in the specified collection
  (optional operation)
- In other words, removes from this set all of its elements that are not contained
  in the specified collection
- If the specified collection is also a set, this operation effectively modifies this
  set so that its value is the intersection of the two sets.
boolean removeAll(Collection<?> c):
- Removes from this set all of its elements that are contained in the specified collection
  (optional operation)
- If the specified collection is also a set, this operation effectively modifies this
  set so that its value is the asymmetric set difference of the two sets.
void clear():
- Removes all of the elements from this set (optional operation)
- The set will be empty after this call returns.
boolean equals(Object o):
- Compares the specified object with this set for equality
- Returns true if the specified object is also a set, the two sets have the same size,
  and every member of the specified set is contained in this set (or equivalently,
  every member of this set is contained in the specified set)
- This definition ensures that the equals method works properly across different implementations
  of the set interface.
int hashCode():
- Returns the hash code value for this set
- The hash code of a set is defined to be the sum of the hash codes of the elements
  in the set, where the hash code of a null element is defined to be zero
- This ensures that s1.equals(s2) implies that s1.hashCode()==s2.hashCode() for any
  two sets s1 and s2, as required by the general contract of Object.hashCode().
default Spliterator<E> spliterator():
- Creates a Spliterator over the elements in this set
- The Spliterator reports Spliterator.DISTINCT
- Implementations should document the reporting of additional characteristic values.
