public Integer(int value):
- Constructs a newly allocated Integer object that represents the specified int value.
public Integer(String s)         throws NumberFormatException:
- Constructs a newly allocated Integer object that represents the int value indicated
  by the String parameter
- The string is converted to an int value in exactly the manner used by the parseInt
  method for radix 10.
public static String toString(int i,                               int radix):
- Returns a string representation of the first argument in the radix specified by
  the second argument
- If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX,
  then the radix 10 is used instead
- If the first argument is negative, the first element of the result is the ASCII
  minus character '-' ('\u002D')
- If the first argument is not negative, no sign character appears in the result
- The remaining characters of the result represent the magnitude of the first argument
- If the magnitude is zero, it is represented by a single zero character '0' ('\u0030');
  otherwise, the first character of the representation of the magnitude will not be
  the zero character
- 'The following ASCII characters are used as digits: 0123456789abcdefghijklmnopqrstuvwxyz
  These are ''\u0030'' through ''\u0039'' and ''\u0061'' through ''\u007A'''
- If radix is N, then the first N of these characters are used as radix-N digits in
  the order shown
- Thus, the digits for hexadecimal (radix 16) are 0123456789abcdef
- 'If uppercase letters are desired, the String.toUpperCase() method may be called
  on the result: Integer.toString(n, 16).toUpperCase()'
public static String toUnsignedString(int i,                                       int radix):
- Returns a string representation of the first argument as an unsigned integer value
  in the radix specified by the second argument
- If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX,
  then the radix 10 is used instead
- Note that since the first argument is treated as an unsigned value, no leading sign
  character is printed
- If the magnitude is zero, it is represented by a single zero character '0' ('\u0030');
  otherwise, the first character of the representation of the magnitude will not be
  the zero character
- The behavior of radixes and the characters used as digits are the same as toString.
public static String toHexString(int i):
- Returns a string representation of the integer argument as an unsigned integer in
  base 16
- The unsigned integer value is the argument plus 232 if the argument is negative;
  otherwise, it is equal to the argument
- This value is converted to a string of ASCII digits in hexadecimal (base 16) with
  no extra leading 0s
- The value of the argument can be recovered from the returned string s by calling
  Integer.parseUnsignedInt(s, 16)
- If the unsigned magnitude is zero, it is represented by a single zero character
  '0' ('\u0030'); otherwise, the first character of the representation of the unsigned
  magnitude will not be the zero character
- 'The following characters are used as hexadecimal digits: 0123456789abcdef These
  are the characters ''\u0030'' through ''\u0039'' and ''\u0061'' through ''\u0066'''
- 'If uppercase letters are desired, the String.toUpperCase() method may be called
  on the result: Integer.toHexString(n).toUpperCase()'
public static String toOctalString(int i):
- Returns a string representation of the integer argument as an unsigned integer in
  base 8
- The unsigned integer value is the argument plus 232 if the argument is negative;
  otherwise, it is equal to the argument
- This value is converted to a string of ASCII digits in octal (base 8) with no extra
  leading 0s
- The value of the argument can be recovered from the returned string s by calling
  Integer.parseUnsignedInt(s, 8)
- If the unsigned magnitude is zero, it is represented by a single zero character
  '0' ('\u0030'); otherwise, the first character of the representation of the unsigned
  magnitude will not be the zero character
- 'The following characters are used as octal digits: 01234567 These are the characters
  ''\u0030'' through ''\u0037''.'
public static String toBinaryString(int i):
- Returns a string representation of the integer argument as an unsigned integer in
  base 2
- The unsigned integer value is the argument plus 232 if the argument is negative;
  otherwise it is equal to the argument
- This value is converted to a string of ASCII digits in binary (base 2) with no extra
  leading 0s
- The value of the argument can be recovered from the returned string s by calling
  Integer.parseUnsignedInt(s, 2)
- If the unsigned magnitude is zero, it is represented by a single zero character
  '0' ('\u0030'); otherwise, the first character of the representation of the unsigned
  magnitude will not be the zero character
- The characters '0' ('\u0030') and '1' ('\u0031') are used as binary digits.
public static String toString(int i):
- Returns a String object representing the specified integer
- The argument is converted to signed decimal representation and returned as a string,
  exactly as if the argument and radix 10 were given as arguments to the toString(int,
  int) method.
public static String toUnsignedString(int i):
- Returns a string representation of the argument as an unsigned decimal value
- The argument is converted to unsigned decimal representation and returned as a string
  exactly as if the argument and radix 10 were given as arguments to the toUnsignedString(int,
  int) method.
? public static int parseInt(String s,                            int radix)                     throws
  NumberFormatException
: - Parses the string argument as a signed integer in the radix specified by the second
    argument
  - The characters in the string must all be digits of the specified radix (as determined
    by whether Character.digit(char, int) returns a nonnegative value), except that
    the first character may be an ASCII minus sign '-' ('\u002D') to indicate a negative
    value or an ASCII plus sign '+' ('\u002B') to indicate a positive value
  - The resulting integer value is returned
  - 'An exception of type NumberFormatException is thrown if any of the following
    situations occurs: The first argument is null or is a string of length zero'
  - The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX
  - Any character of the string is not a digit of the specified radix, except that
    the first character may be a minus sign '-' ('\u002D') or plus sign '+' ('\u002B')
    provided that the string is longer than length 1
  - The value represented by the string is not a value of type int
  - 'Examples:  parseInt(0, 10) returns 0 parseInt(473, 10) returns 473 parseInt(+42,
    10) returns 42 parseInt(-0, 10) returns 0 parseInt(-FF, 16) returns -255 parseInt(1100110,
    2) returns 102 parseInt(2147483647, 10) returns 2147483647 parseInt(-2147483648,
    10) returns -2147483648 parseInt(2147483648, 10) throws a NumberFormatException
    parseInt(99, 8) throws a NumberFormatException parseInt(Kona, 10) throws a NumberFormatException
    parseInt(Kona, 27) returns 411787'
public static int parseInt(String s)                     throws NumberFormatException:
- Parses the string argument as a signed decimal integer
- The characters in the string must all be decimal digits, except that the first character
  may be an ASCII minus sign '-' ('\u002D') to indicate a negative value or an ASCII
  plus sign '+' ('\u002B') to indicate a positive value
- The resulting integer value is returned, exactly as if the argument and the radix
  10 were given as arguments to the parseInt(java.lang.String, int) method.
? public static int parseUnsignedInt(String s,                                    int
  radix)                             throws NumberFormatException
: - Parses the string argument as an unsigned integer in the radix specified by the
    second argument
  - An unsigned integer maps the values usually associated with negative numbers to
    positive numbers larger than MAX_VALUE
  - The characters in the string must all be digits of the specified radix (as determined
    by whether Character.digit(char, int) returns a nonnegative value), except that
    the first character may be an ASCII plus sign '+' ('\u002B')
  - The resulting integer value is returned
  - 'An exception of type NumberFormatException is thrown if any of the following
    situations occurs: The first argument is null or is a string of length zero'
  - The radix is either smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX
  - Any character of the string is not a digit of the specified radix, except that
    the first character may be a plus sign '+' ('\u002B') provided that the string
    is longer than length 1
  - The value represented by the string is larger than the largest unsigned int, 232-1
  - ''
public static int parseUnsignedInt(String s)                             throws NumberFormatException:
- Parses the string argument as an unsigned decimal integer
- The characters in the string must all be decimal digits, except that the first character
  may be an an ASCII plus sign '+' ('\u002B')
- The resulting integer value is returned, exactly as if the argument and the radix
  10 were given as arguments to the parseUnsignedInt(java.lang.String, int) method.
? public static Integer valueOf(String s,                               int radix)                        throws
  NumberFormatException
: - Returns an Integer object holding the value extracted from the specified String
    when parsed with the radix given by the second argument
  - The first argument is interpreted as representing a signed integer in the radix
    specified by the second argument, exactly as if the arguments were given to the
    parseInt(java.lang.String, int) method
  - The result is an Integer object that represents the integer value specified by
    the string
  - 'In other words, this method returns an Integer object equal to the value of:
    new Integer(Integer.parseInt(s, radix))'
public static Integer valueOf(String s)                        throws NumberFormatException:
- Returns an Integer object holding the value of the specified String
- The argument is interpreted as representing a signed decimal integer, exactly as
  if the argument were given to the parseInt(java.lang.String) method
- The result is an Integer object that represents the integer value specified by the
  string
- 'In other words, this method returns an Integer object equal to the value of: new
  Integer(Integer.parseInt(s))'
public static Integer valueOf(int i):
- Returns an Integer instance representing the specified int value
- If a new Integer instance is not required, this method should generally be used
  in preference to the constructor Integer(int), as this method is likely to yield
  significantly better space and time performance by caching frequently requested
  values
- This method will always cache values in the range -128 to 127, inclusive, and may
  cache other values outside of this range.
public byte byteValue():
- Returns the value of this Integer as a byte after a narrowing primitive conversion.
public short shortValue():
- Returns the value of this Integer as a short after a narrowing primitive conversion.
public int intValue():
- Returns the value of this Integer as an int.
public long longValue():
- Returns the value of this Integer as a long after a widening primitive conversion.
public float floatValue():
- Returns the value of this Integer as a float after a widening primitive conversion.
public double doubleValue():
- Returns the value of this Integer as a double after a widening primitive conversion.
public String toString():
- Returns a String object representing this Integer's value
- The value is converted to signed decimal representation and returned as a string,
  exactly as if the integer value were given as an argument to the toString(int) method.
public int hashCode():
- Returns a hash code for this Integer.
public static int hashCode(int value):
- Returns a hash code for a int value; compatible with Integer.hashCode().
public boolean equals(Object obj):
- Compares this object to the specified object
- The result is true if and only if the argument is not null and is an Integer object
  that contains the same int value as this object.
public static Integer getInteger(String nm):
- Determines the integer value of the system property with the specified name
- The first argument is treated as the name of a system property
- System properties are accessible through the System.getProperty(java.lang.String)
  method
- The string value of this property is then interpreted as an integer value using
  the grammar supported by decode and an Integer object representing this value is
  returned
- If there is no property with the specified name, if the specified name is empty
  or null, or if the property does not have the correct numeric format, then null
  is returned
- 'In other words, this method returns an Integer object equal to the value of: getInteger(nm,
  null)'
public static Integer getInteger(String nm,                                  int val):
- Determines the integer value of the system property with the specified name
- The first argument is treated as the name of a system property
- System properties are accessible through the System.getProperty(java.lang.String)
  method
- The string value of this property is then interpreted as an integer value using
  the grammar supported by decode and an Integer object representing this value is
  returned
- The second argument is the default value
- An Integer object that represents the value of the second argument is returned if
  there is no property of the specified name, if the property does not have the correct
  numeric format, or if the specified name is empty or null
- 'In other words, this method returns an Integer object equal to the value of: getInteger(nm,
  new Integer(val)) but in practice it may be implemented in a manner such as:  Integer
  result = getInteger(nm, null); return (result == null) ? new Integer(val) : result;  to
  avoid the unnecessary allocation of an Integer object when the default value is
  not needed.'
public static Integer getInteger(String nm,                                  Integer val):
- Returns the integer value of the system property with the specified name
- The first argument is treated as the name of a system property
- System properties are accessible through the System.getProperty(java.lang.String)
  method
- 'The string value of this property is then interpreted as an integer value, as per
  the decode method, and an Integer object representing this value is returned; in
  summary: If the property value begins with the two ASCII characters         0x or
  the ASCII character #, not      followed by a minus sign, then the rest of it is
  parsed as a      hexadecimal integer exactly as by the method      valueOf(java.lang.String,
  int) with radix 16'
- If the property value begins with the ASCII character     0 followed by another
  character, it is parsed as an     octal integer exactly as by the method     valueOf(java.lang.String,
  int) with radix 8
- Otherwise, the property value is parsed as a decimal integer exactly as by the method
  valueOf(java.lang.String, int) with radix 10
- The second argument is the default value
- The default value is returned if there is no property of the specified name, if
  the property does not have the correct numeric format, or if the specified name
  is empty or null.
public static Integer decode(String nm)                       throws NumberFormatException:
- Decodes a String into an Integer
- 'Accepts decimal, hexadecimal, and octal numbers given by the following grammar:
  DecodableString:Signopt DecimalNumeralSignopt 0x HexDigitsSignopt 0X HexDigitsSignopt
  # HexDigitsSignopt 0 OctalDigitsSign:-+DecimalNumeral, HexDigits, and OctalDigits
  are as defined in section 3.10.1 of The JavaTM Language Specification, except that
  underscores are not accepted between digits'
- 'The sequence of characters following an optional sign and/or radix specifier (0x,
  0X, #, or leading zero) is parsed as by the Integer.parseInt method with the indicated
  radix (10, 16, or 8)'
- This sequence of characters must represent a positive value or a NumberFormatException
  will be thrown
- The result is negated if first character of the specified String is the minus sign
- No whitespace characters are permitted in the String.
public int compareTo(Integer anotherInteger):
- Compares two Integer objects numerically.
public static int compare(int x,                           int y):
- Compares two int values numerically
- 'The value returned is identical to what would be returned by:     Integer.valueOf(x).compareTo(Integer.valueOf(y))'
public static int compareUnsigned(int x,                                   int y):
- Compares two int values numerically treating the values as unsigned.
public static long toUnsignedLong(int x):
- Converts the argument to a long by an unsigned conversion
- In an unsigned conversion to a long, the high-order 32 bits of the long are zero
  and the low-order 32 bits are equal to the bits of the integer argument
- Consequently, zero and positive int values are mapped to a numerically equal long
  value and negative int values are mapped to a long value equal to the input plus
  232.
public static int divideUnsigned(int dividend,                                  int divisor):
- Returns the unsigned quotient of dividing the first argument by the second where
  each argument and the result is interpreted as an unsigned value
- Note that in two's complement arithmetic, the three other basic arithmetic operations
  of add, subtract, and multiply are bit-wise identical if the two operands are regarded
  as both being signed or both being unsigned
- Therefore separate addUnsigned, etc
- methods are not provided.
public static int remainderUnsigned(int dividend,                                     int divisor):
- Returns the unsigned remainder from dividing the first argument by the second where
  each argument and the result is interpreted as an unsigned value.
public static int highestOneBit(int i):
- Returns an int value with at most a single one-bit, in the position of the highest-order
  (leftmost) one-bit in the specified int value
- Returns zero if the specified value has no one-bits in its two's complement binary
  representation, that is, if it is equal to zero.
public static int lowestOneBit(int i):
- Returns an int value with at most a single one-bit, in the position of the lowest-order
  (rightmost) one-bit in the specified int value
- Returns zero if the specified value has no one-bits in its two's complement binary
  representation, that is, if it is equal to zero.
public static int numberOfLeadingZeros(int i):
- Returns the number of zero bits preceding the highest-order (leftmost) one-bit in
  the two's complement binary representation of the specified int value
- Returns 32 if the specified value has no one-bits in its two's complement representation,
  in other words if it is equal to zero
- Note that this method is closely related to the logarithm base 2
- 'For all positive int values x: floor(log2(x)) = 31 - numberOfLeadingZeros(x)ceil(log2(x))
  = 32 - numberOfLeadingZeros(x - 1)'
public static int numberOfTrailingZeros(int i):
- Returns the number of zero bits following the lowest-order (rightmost) one-bit in
  the two's complement binary representation of the specified int value
- Returns 32 if the specified value has no one-bits in its two's complement representation,
  in other words if it is equal to zero.
public static int bitCount(int i):
- Returns the number of one-bits in the two's complement binary representation of
  the specified int value
- This function is sometimes referred to as the population count.
public static int rotateLeft(int i,                              int distance):
- Returns the value obtained by rotating the two's complement binary representation
  of the specified int value left by the specified number of bits
- '(Bits shifted out of the left hand, or high-order, side reenter on the right, or
  low-order.) Note that left rotation with a negative distance is equivalent to right
  rotation: rotateLeft(val, -distance) == rotateRight(val, distance)'
- 'Note also that rotation by any multiple of 32 is a no-op, so all but the last five
  bits of the rotation distance can be ignored, even if the distance is negative:
  rotateLeft(val, distance) == rotateLeft(val, distance & 0x1F).'
public static int rotateRight(int i,                               int distance):
- Returns the value obtained by rotating the two's complement binary representation
  of the specified int value right by the specified number of bits
- '(Bits shifted out of the right hand, or low-order, side reenter on the left, or
  high-order.) Note that right rotation with a negative distance is equivalent to
  left rotation: rotateRight(val, -distance) == rotateLeft(val, distance)'
- 'Note also that rotation by any multiple of 32 is a no-op, so all but the last five
  bits of the rotation distance can be ignored, even if the distance is negative:
  rotateRight(val, distance) == rotateRight(val, distance & 0x1F).'
public static int reverse(int i):
- Returns the value obtained by reversing the order of the bits in the two's complement
  binary representation of the specified int value.
public static int signum(int i):
- Returns the signum function of the specified int value
- (The return value is -1 if the specified value is negative; 0 if the specified value
  is zero; and 1 if the specified value is positive.)
public static int reverseBytes(int i):
- Returns the value obtained by reversing the order of the bytes in the two's complement
  representation of the specified int value.
public static int sum(int a,                       int b):
- Adds two integers together as per the + operator.
public static int max(int a,                       int b):
- Returns the greater of two int values as if by calling Math.max.
public static int min(int a,                       int b):
- Returns the smaller of two int values as if by calling Math.min.
