protected DateFormat():
- Create a new date format.
? public final StringBuffer format(Object obj,                                  StringBuffer
  toAppendTo,                                  FieldPosition fieldPosition)
: - Overrides Format
  - Formats a time object into a time string
  - Examples of time objects are a time value expressed in milliseconds and a Date
    object.
? public abstract StringBuffer format(Date date,                                     StringBuffer
  toAppendTo,                                     FieldPosition fieldPosition)
: - Formats a Date into a date/time string.
public final String format(Date date):
- Formats a Date into a date/time string.
public Date parse(String source)            throws ParseException:
- Parses text from the beginning of the given string to produce a date
- The method may not use the entire text of the given string
- See the parse(String, ParsePosition) method for more information on date parsing.
public abstract Date parse(String source,                            ParsePosition pos):
- Parse a date/time string according to the given parse position
- For example, a time text 07/10/96 4:5 PM, PDT will be parsed into a Date that is
  equivalent to Date(837039900000L)
- 'By default, parsing is lenient: If the input is not in the form used by this object''s
  format method but can still be parsed as a date, then the parse succeeds'
- Clients may insist on strict adherence to the format by calling setLenient(false)
- This parsing operation uses the calendar to produce a Date
- As a result, the calendar's date-time fields and the TimeZone value may have been
  overwritten, depending on subclass implementations
- Any TimeZone value that has previously been set by a call to setTimeZone may need
  to be restored for further operations.
public Object parseObject(String source,                           ParsePosition pos):
- Parses text from a string to produce a Date
- The method attempts to parse text starting at the index given by pos
- If parsing succeeds, then the index of pos is updated to the index after the last
  character used (parsing does not necessarily use all characters up to the end of
  the string), and the parsed date is returned
- The updated pos can be used to indicate the starting point for the next call to
  this method
- If an error occurs, then the index of pos is not changed, the error index of pos
  is set to the index of the character where the error occurred, and null is returned
- See the parse(String, ParsePosition) method for more information on date parsing.
public static final DateFormat getTimeInstance():
- Gets the time formatter with the default formatting style for the default FORMAT
  locale
- This is equivalent to calling getTimeInstance(DEFAULT,     Locale.getDefault(Locale.Category.FORMAT)).
public static final DateFormat getTimeInstance(int style):
- Gets the time formatter with the given formatting style for the default FORMAT locale
- This is equivalent to calling getTimeInstance(style,     Locale.getDefault(Locale.Category.FORMAT)).
public static final DateFormat getTimeInstance(int style,                                                Locale aLocale):
- Gets the time formatter with the given formatting style for the given locale.
public static final DateFormat getDateInstance():
- Gets the date formatter with the default formatting style for the default FORMAT
  locale
- This is equivalent to calling getDateInstance(DEFAULT,     Locale.getDefault(Locale.Category.FORMAT)).
public static final DateFormat getDateInstance(int style):
- Gets the date formatter with the given formatting style for the default FORMAT locale
- This is equivalent to calling getDateInstance(style,     Locale.getDefault(Locale.Category.FORMAT)).
public static final DateFormat getDateInstance(int style,                                                Locale aLocale):
- Gets the date formatter with the given formatting style for the given locale.
public static final DateFormat getDateTimeInstance():
- Gets the date/time formatter with the default formatting style for the default FORMAT
  locale
- This is equivalent to calling getDateTimeInstance(DEFAULT,     DEFAULT, Locale.getDefault(Locale.Category.FORMAT)).
? public static final DateFormat getDateTimeInstance(int dateStyle,                                                    int
  timeStyle)
: - Gets the date/time formatter with the given date and time formatting styles for
    the default FORMAT locale
  - This is equivalent to calling getDateTimeInstance(dateStyle,     timeStyle, Locale.getDefault(Locale.Category.FORMAT)).
? public static final DateFormat getDateTimeInstance(int dateStyle,                                                    int
  timeStyle,                                                    Locale aLocale)
: - Gets the date/time formatter with the given formatting styles for the given locale.
public static final DateFormat getInstance():
- Get a default date/time formatter that uses the SHORT style for both the date and
  the time.
public static Locale[] getAvailableLocales():
- Returns an array of all locales for which the get*Instance methods of this class
  can return localized instances
- The returned array represents the union of locales supported by the Java runtime
  and by installed DateFormatProvider implementations
- It must contain at least a Locale instance equal to Locale.US.
public void setCalendar(Calendar newCalendar):
- Set the calendar to be used by this date format
- Initially, the default calendar for the specified or default locale is used
- Any TimeZone and leniency values that have previously been set are overwritten by
  newCalendar's values.
public Calendar getCalendar():
- Gets the calendar associated with this date/time formatter.
public void setNumberFormat(NumberFormat newNumberFormat):
- Allows you to set the number formatter.
public NumberFormat getNumberFormat():
- Gets the number formatter which this date/time formatter uses to format and parse
  a time.
public void setTimeZone(TimeZone zone):
- Sets the time zone for the calendar of this DateFormat object
- This method is equivalent to the following call
- getCalendar().setTimeZone(zone) The TimeZone set by this method is overwritten by
  a setCalendar call
- The TimeZone set by this method may be overwritten as a result of a call to the
  parse method.
public TimeZone getTimeZone():
- Gets the time zone
- This method is equivalent to the following call
- getCalendar().getTimeZone()
public void setLenient(boolean lenient):
- Specify whether or not date/time parsing is to be lenient
- With lenient parsing, the parser may use heuristics to interpret inputs that do
  not precisely match this object's format
- With strict parsing, inputs must match this object's format
- This method is equivalent to the following call
- getCalendar().setLenient(lenient) This leniency value is overwritten by a call to
  setCalendar().
public boolean isLenient():
- Tell whether date/time parsing is to be lenient
- This method is equivalent to the following call
- getCalendar().isLenient()
public int hashCode():
- Overrides hashCode
public boolean equals(Object obj):
- Overrides equals
public Object clone():
- Overrides Cloneable
