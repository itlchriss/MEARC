Design a data structure that can store the count of strings and has the ability to return the strings with the minimum and maximum counts. The method `getMaxKey()` should return one of the keys with the highest count. If no element exists, it should return an empty string `str_`. The method `getMinKey()` should return one of the keys with the lowest count. If no element exists, it should return an empty string `str_`. The code snippet `allOne.getMaxKey()` should return the string "str_hello", and the code snippet `allOne.getMinKey()` should return the string "hello". The code snippet `allOne.getMaxKey()` should return the string "str_hello", and the code snippet `allOne.getMinKey()` should return the string "leet". The initial `prepare.sh` and `run.sh` methods should have a `getMaxKey()` function that returns one of the keys with the highest count. If no element exists, it should return an empty string `str_`. The initial `prepare.sh` and `run.sh` methods should have a `getMinKey()` function that returns one of the keys with the lowest count. If no element exists, it should return an empty string `str_`. The statement should be written in a way that clearly applies to the context of the given Java methods (`public Bucket(int cnt)`, `public AllOne()`, `public void inc(String key)`, `public void dec(String key)`, `public String getMaxKey()`, `public String getMinKey()`), explicitly relates the used terms to all parameters and result data types of the given methods, uses no dangling modifiers, uses no pronouns, does not mention the given methods, and uses words to describe the algorithm.
